name: Experiment Bundle Release

permissions:
  contents: read

on:
  # manuell starten
  workflow_dispatch:
  # oder automatisch bei Push auf genau diesen Test-Branch
  push:
    branches: [ "ci/bundle-release-test" ]

jobs:
  build:
    name: Build bundleRelease (Experiment)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: gradle

      # Syncthing/Go wird für buildNative benötigt – beibehalten
      - name: Get Go version from Syncthing upstream
        id: get_go_version
        shell: bash
        run: |
          set -euo pipefail
          GO_VERSION=$(grep -E '^\s*GO_VERSION:' syncthing/src/github.com/syncthing/syncthing/.github/workflows/build-syncthing.yaml | head -1 | cut -d '"' -f 2)
          echo "go_version=${GO_VERSION}" >> "$GITHUB_OUTPUT"
          echo "GO_VERSION=${GO_VERSION}" >> "$GITHUB_ENV"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.get_go_version.outputs.go_version }}
          check-latest: true
          cache: false

      # Versionen aus dem Gradle-Katalog lesen (cmdline-tools, build-tools, compileSdk)
      - name: Read Android versions from gradle catalog
        id: android_versions
        shell: bash
        run: |
          set -euo pipefail
          # erwartete Keys in gradle/libs.versions.toml:
          # android-cmdline-tools, android-build-tools, android-compile-sdk
          CMDLINE_TOOLS_VERSION=$(grep -E '^android-cmdline-tools\s*=' gradle/libs.versions.toml | head -1 | cut -d '"' -f 2)
          BUILD_TOOLS_VERSION=$(grep -E '^android-build-tools\s*=' gradle/libs.versions.toml | head -1 | cut -d '"' -f 2)
          COMPILE_SDK=$(grep -E '^android-compile-sdk\s*=' gradle/libs.versions.toml | head -1 | tr -dc '0-9')
          echo "cmdline_tools_version=${CMDLINE_TOOLS_VERSION}" >> "$GITHUB_OUTPUT"
          echo "build_tools_version=${BUILD_TOOLS_VERSION}" >> "$GITHUB_OUTPUT"
          echo "compile_sdk=${COMPILE_SDK}" >> "$GITHUB_OUTPUT"

      - name: Install Android SDK
        env:
          CMDLINE_TOOLS_VERSION: ${{ steps.android_versions.outputs.cmdline_tools_version }}
          BUILD_TOOLS_VERSION: ${{ steps.android_versions.outputs.build_tools_version }}
          COMPILE_SDK: ${{ steps.android_versions.outputs.compile_sdk }}
        shell: bash
        run: |
          set -euo pipefail
          echo "ANDROID_HOME=$HOME/android-sdk" >> "$GITHUB_ENV"
          echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> "$GITHUB_ENV"
          echo "$HOME/android-sdk/cmdline-tools/latest/bin" >> "$GITHUB_PATH"

          mkdir -p "$HOME/android-sdk/cmdline-tools"
          cd "$HOME/android-sdk/cmdline-tools"

          SDK_TOOLS_FILE="commandlinetools-linux-${CMDLINE_TOOLS_VERSION}_latest.zip"
          echo "Downloading cmdline-tools: ${SDK_TOOLS_FILE}"
          wget -q "https://dl.google.com/android/repository/${SDK_TOOLS_FILE}"
          unzip -q "${SDK_TOOLS_FILE}"
          rm -f "${SDK_TOOLS_FILE}"
          mv cmdline-tools latest

          yes | "$HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager" --licenses >/dev/null
          "$HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager" \
            "platform-tools" \
            "build-tools;${BUILD_TOOLS_VERSION}" \
            "platforms;android-${COMPILE_SDK}"

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', 'gradle/libs.versions.toml') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build bundleRelease (and native)
        env:
          SYNCTHING_RELEASE_KEY_ALIAS: Syncthing-Fork
          SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
          SYNCTHING_RELEASE_STORE_FILE: ${{ runner.temp }}/signing-keystore.jks
        shell: bash
        run: |
          set -euo pipefail
          unset ANDROID_NDK_HOME
          # Keystore nur bereitstellen, wenn Secret existiert (PRs von Forks haben keinen Zugriff)
          if [[ -n "${{ secrets.SIGNING_KEYSTORE_JKS_BASE64 }}" ]]; then
            echo '${{ secrets.SIGNING_KEYSTORE_JKS_BASE64 }}' | base64 -d > "$SYNCTHING_RELEASE_STORE_FILE"
          fi
          java -version
          # Falls dein Projekt kein buildNative braucht, entferne es einfach
          ./gradlew --no-daemon --stacktrace buildNative bundleRelease
          rm -f "$SYNCTHING_RELEASE_STORE_FILE" || true

      - name: Upload AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: bundle-release-aab
          path: app/build/outputs/bundle/release/*.aab
          if-no-files-found: error
